version: '3.8'

services:
  # ============================================================================
  # Application Services
  # ============================================================================
  
  # Main API Service
  fraud-detection-api:
    build:
      context: .
      target: development
      args:
        VERSION: ${VERSION:-dev}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: fraud-detection-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fraud_detection
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ML_MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    volumes:
      - ./service:/app/service
      - ./features:/app/features
      - ./config:/app/config
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - fraud-detection-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streaming Service
  fraud-detection-streaming:
    build:
      context: .
      target: streaming
    container_name: fraud-detection-streaming
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fraud_detection
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ML_MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    volumes:
      - ./streaming:/app/streaming
      - ./service/models:/app/service/models
      - ./features:/app/features
      - ./config:/app/config
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      fraud-detection-api:
        condition: service_healthy
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # ML Training Service
  fraud-detection-ml:
    build:
      context: .
      target: ml-training
    container_name: fraud-detection-ml
    ports:
      - "8888:8888"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fraud_detection
      - REDIS_URL=redis://redis:6379/0
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=fraud-detection-ml
    volumes:
      - ./notebooks:/app/notebooks
      - ./experiments:/app/experiments
      - ./models:/app/models
      - ./data:/app/data
      - ./service:/app/service
      - ./features:/app/features
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # ============================================================================
  # Infrastructure Services
  # ============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: fraud-detection-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fraud_detection
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fraud-detection-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fraud_detection"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fraud-detection-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - fraud-detection-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fraud-detection-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fraud-detection-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - fraud-detection-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ============================================================================
  # Monitoring Services
  # ============================================================================
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-detection-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fraud-detection-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fraud-detection-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # ============================================================================
  # Development Tools
  # ============================================================================
  
  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fraud-detection-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@fraud-detection.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - fraud-detection-network
    restart: unless-stopped

  # Kafka UI for Message Broker Management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fraud-detection-kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - fraud-detection-network
    restart: unless-stopped

# ============================================================================
# Networks
# ============================================================================
networks:
  fraud-detection-network:
    driver: bridge
    name: fraud-detection-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    name: fraud-detection-postgres-data
  redis_data:
    name: fraud-detection-redis-data
  kafka_data:
    name: fraud-detection-kafka-data
  zookeeper_data:
    name: fraud-detection-zookeeper-data
  zookeeper_logs:
    name: fraud-detection-zookeeper-logs
  prometheus_data:
    name: fraud-detection-prometheus-data
  grafana_data:
    name: fraud-detection-grafana-data
  pgadmin_data:
    name: fraud-detection-pgadmin-data