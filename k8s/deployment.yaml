# Kubernetes Deployment Manifests for Fraud Detection System
apiVersion: v1
kind: Namespace
metadata:
  name: fraud-detection
  labels:
    app: fraud-detection
    environment: production
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fraud-detection-config
  namespace: fraud-detection
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_WORKERS: "4"
  PROMETHEUS_ENABLED: "true"
  PROMETHEUS_PORT: "8001"
  JAEGER_ENABLED: "true"
  JAEGER_SERVICE_NAME: "fraud-detection-api"
  HEALTH_CHECK_ENABLED: "true"
  HEALTH_CHECK_PATH: "/health"
  CACHE_ENABLED: "true"
  CACHE_TTL: "3600"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
  FEATURE_REAL_TIME_SCORING: "true"
  FEATURE_BATCH_PROCESSING: "true"
  FEATURE_MODEL_EXPLAINABILITY: "true"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: fraud-detection-secrets
  namespace: fraud-detection
type: Opaque
stringData:
  SECRET_KEY: "your-production-secret-key-here"
  DATABASE_URL: "postgresql://username:password@postgres:5432/fraud_detection"
  REDIS_URL: "redis://redis:6379/0"
  KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
  SENTRY_DSN: "https://your-sentry-dsn@sentry.io/project-id"
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/your/webhook/url"
---
# Deployment for the main API service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-api
  namespace: fraud-detection
  labels:
    app: fraud-detection-api
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fraud-detection-api
  template:
    metadata:
      labels:
        app: fraud-detection-api
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fraud-detection-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: fraud-detection-api
        image: ghcr.io/ml-crml/fraud-detection:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: fraud-detection-config
        - secretRef:
            name: fraud-detection-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: models
          mountPath: /app/models
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: logs
        emptyDir: {}
      - name: models
        persistentVolumeClaim:
          claimName: fraud-detection-models
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fraud-detection-api
              topologyKey: kubernetes.io/hostname
---
# Deployment for the streaming service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-streaming
  namespace: fraud-detection
  labels:
    app: fraud-detection-streaming
    component: streaming
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fraud-detection-streaming
  template:
    metadata:
      labels:
        app: fraud-detection-streaming
        component: streaming
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fraud-detection-streaming
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: fraud-detection-streaming
        image: ghcr.io/ml-crml/fraud-detection:latest
        imagePullPolicy: Always
        command: ["python", "-m", "streaming.kafka_consumer"]
        ports:
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: fraud-detection-config
        - secretRef:
            name: fraud-detection-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: models
          mountPath: /app/models
      volumes:
      - name: logs
        emptyDir: {}
      - name: models
        persistentVolumeClaim:
          claimName: fraud-detection-models
---
# Service for API
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-api-service
  namespace: fraud-detection
  labels:
    app: fraud-detection-api
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  selector:
    app: fraud-detection-api
---
# Service for Streaming (metrics only)
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-streaming-service
  namespace: fraud-detection
  labels:
    app: fraud-detection-streaming
    component: streaming
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  selector:
    app: fraud-detection-streaming
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fraud-detection-ingress
  namespace: fraud-detection
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - fraud-detection.example.com
    secretName: fraud-detection-tls
  rules:
  - host: fraud-detection.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fraud-detection-api-service
            port:
              number: 8000
---
# ServiceAccount for API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fraud-detection-api
  namespace: fraud-detection
  labels:
    app: fraud-detection-api
---
# ServiceAccount for Streaming
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fraud-detection-streaming
  namespace: fraud-detection
  labels:
    app: fraud-detection-streaming
---
# PersistentVolumeClaim for ML models
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fraud-detection-models
  namespace: fraud-detection
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
# HorizontalPodAutoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fraud-detection-api-hpa
  namespace: fraud-detection
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fraud-detection-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# PodDisruptionBudget for API
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fraud-detection-api-pdb
  namespace: fraud-detection
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fraud-detection-api
---
# PodDisruptionBudget for Streaming
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fraud-detection-streaming-pdb
  namespace: fraud-detection
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: fraud-detection-streaming
---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fraud-detection-network-policy
  namespace: fraud-detection
spec:
  podSelector:
    matchLabels:
      app: fraud-detection-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: kafka
    ports:
    - protocol: TCP
      port: 9092
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443