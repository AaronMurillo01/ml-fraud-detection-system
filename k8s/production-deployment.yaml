apiVersion: v1
kind: Namespace
metadata:
  name: fraud-detection
  labels:
    name: fraud-detection
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fraud-detection-config
  namespace: fraud-detection
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_WORKERS: "4"
  ENABLE_CORS: "true"
  CORS_ORIGINS: "https://fraud-detection.company.com"
  DATABASE_HOST: "postgres-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "fraud_detection"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  KAFKA_BOOTSTRAP_SERVERS: "kafka-service:9092"
  MODEL_PATH: "/app/models"
  MODEL_CACHE_TTL: "3600"
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  JAEGER_ENDPOINT: "http://jaeger-service:14268/api/traces"
  PROMETHEUS_ENDPOINT: "http://prometheus-service:9090"
---
apiVersion: v1
kind: Secret
metadata:
  name: fraud-detection-secrets
  namespace: fraud-detection
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  DATABASE_PASSWORD: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  DATABASE_USER: ZnJhdWRfdXNlcg==  # fraud_user
  SECRET_KEY: c3VwZXItc2VjcmV0LWtleS1mb3ItcHJvZHVjdGlvbg==  # super-secret-key-for-production
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=  # redis_password
  JWT_SECRET: and0LXNlY3JldC1rZXktZm9yLXByb2R1Y3Rpb24=  # jwt-secret-key-for-production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-api
  namespace: fraud-detection
  labels:
    app: fraud-detection-api
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fraud-detection-api
  template:
    metadata:
      labels:
        app: fraud-detection-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fraud-detection-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: fraud-detection-api
        image: fraud-detection:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/0"
        envFrom:
        - configMapRef:
            name: fraud-detection-config
        - secretRef:
            name: fraud-detection-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-storage-pvc
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "fraud-detection"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-api-service
  namespace: fraud-detection
  labels:
    app: fraud-detection-api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: fraud-detection-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fraud-detection-ingress
  namespace: fraud-detection
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - fraud-detection.company.com
    secretName: fraud-detection-tls
  rules:
  - host: fraud-detection.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fraud-detection-api-service
            port:
              number: 8000
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fraud-detection-api-pdb
  namespace: fraud-detection
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fraud-detection-api
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fraud-detection-api-hpa
  namespace: fraud-detection
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fraud-detection-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fraud-detection-service-account
  namespace: fraud-detection
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: fraud-detection
  name: fraud-detection-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fraud-detection-role-binding
  namespace: fraud-detection
subjects:
- kind: ServiceAccount
  name: fraud-detection-service-account
  namespace: fraud-detection
roleRef:
  kind: Role
  name: fraud-detection-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage-pvc
  namespace: fraud-detection
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
